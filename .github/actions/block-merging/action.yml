name: Block Merge
description: Block merging until the main branch is good to go
inputs:
  github_token:
    description: Token to access github repo
    required: true
  branch:
    description: Target branch to check
    default: main
  bypass_prefix:
    description: Commit message prefix to bypass the check
    default: fix
runs:
  using: "composite"
  steps:
    - name: Add Link to Description
      if: github.event_name == 'pull_request'
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea  # v7.0.1
      env:
        BRANCH: ${{ inputs.branch }}
        BYPASS_PREFIX: ${{ inputs.bypass_prefix }}
        PR_TITLE: ${{ github.event.pull_request.title }}
      with:
        github-token: ${{ inputs.github_token }}
        script: |-
          const {owner,repo} = context.repo;
          const branch = process.env.BRANCH;

          const prTitle = process.env.PR_TITLE;
          const bypassPrefix = process.env.BYPASS_PREFIX;

          if (prTitle.startsWith(bypassPrefix)) {
            console.log(`Merging is allowed as the PR title ("${prTitle}") matches the bypass prefix ("${bypassPrefix}")`);
            process.exit(0);
          }

          const checksResponse = await github.rest.checks.listForRef({
            owner: owner,
            repo: repo,
            ref: `heads/${branch}`,
          });
          if (checksResponse.status != 200) {
            core.setFailed(`Merging is blocked as the checks for ${branch} couldn't be retrieved`);
            process.exit(1);
          }

          const checks = checksResponse.data.check_runs;

          let isCompleted = true;
          for (const check of checks) {
            if (check.status !== "completed") {
              isCompleted = false;
            }
          }

          if (!isCompleted) {
            core.setFailed(`Merging is blocked as the checks for ${branch} haven't completed yet`);
            process.exit(1);
          }

          let isFailure = true;
          for (const check of checks) {
            if (check.conclusion !== "failure") {
              isFailure = false;
            }
          }
          
          if (isFailure) {
            process.exit(1);
          }

          console.log(`Merging is allowed as all checks for ${branch} have completed without failures`);
          process.exit(0);
